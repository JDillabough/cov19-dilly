{"version":3,"sources":["components/InfoBox.js","components/Table.js","components/Map.js","components/LineGraph.js","util.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","Map","center","zoom","TileLayer","url","attribution","options","legend","display","legendText","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","useEffect","a","fetch","then","response","json","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","sortData","sortedData","sort","b","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","mapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11005167.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({ title, cases, total }) {\n  return(\n  <Card className=\"infoBox\">\n    <CardContent>\n      <Typography className=\"infoBox__title\" color=\"textSecondary\">\n        {title}\n      </Typography>\n      <h2 className=\"infoBox__cases\">{cases}</h2>\n\n      <Typography className=\"infoBox__total\" color=\"textSecondary\">\n        {total} Total\n      </Typography>\n    </CardContent>\n  </Card>\n  )\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport '../css/Table.css'\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{cases}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\nexport default Table;\n","import React from 'react';\nimport '../css/Map.css'\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\n\nfunction Map({ center, zoom }) {\n    return (\n        <div className='map'>\n            <LeafletMap center={center} zoom={zoom} >\n                <TileLayer url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors' />\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n    legendText: \"Current\"\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: true,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function(tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\"\n      }\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false\n        },\n        ticks: {\n          callback: function(value, index, values) {\n            return numeral(value).format(\"0a\");\n          }\n        }\n      }\n    ]\n  }\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then(response => response.json())\n        .then(data => {\n          const chartData = buildChartData(data, \"cases\");\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  const buildChartData = (data, casesType = \"cases\") => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n\n  return (\n    <div>\n      <h3>Daily Case Chart</h3>\n      {data && data.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 54, 0.5\",\n                borderColor: \"#CC1034\",\n                data: data\n              }\n            ]\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","export const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if (a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n\n    return sortedData;\n};","import React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport 'leaflet/dist/leaflet.css';\n\nimport InfoBox from \"./components/InfoBox\";\nimport Table from './components/Table';\nimport Map from \"./components/Map\";\nimport LineGraph from './components/LineGraph';\nimport { sortData } from \"./util\"; \n\nimport './css/App.css'\n\nfunction App() {\n  const [ countries, setCountries ] = useState([]);\n  const [ country, setCountry ] = useState(\"worldwide\");\n  const [ countryInfo, setCountryInfo ] = useState({});\n  const [ tableData, setTableData ] = useState([]);\n  const [ mapCenter, setMapCenter ] = useState({\n    lat: 51, \n    lng: 0\n  });\n  const [ mapZoom, setMapZoom ] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async e => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n        await fetch(url)\n          .then(response => response.json())\n          .then(data => {\n            setCountry(countryCode);\n            setCountryInfo(data);\n          });\n  };\n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1 className='title'>Cov-19 Today</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox title=\"Coronavirus Cases Today\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox title=\"Recovered Today\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n          <InfoBox className='test' title=\"Deaths Today\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n\n        <Map  \n        center={mapCenter}\n        zoom={mapZoom}\n        className='mappy'\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent className='country__card'>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide New Cases</h3>\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}